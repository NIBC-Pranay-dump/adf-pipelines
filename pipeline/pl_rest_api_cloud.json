{
	"name": "pl_rest_api_cloud",
	"properties": {
		"description": "Use this pipeline to connect the the API managed services REST API",
		"activities": [
			{
				"name": "Get access token",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get secret",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"headers": {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					"url": "https://login.microsoftonline.com/8614d95f-762b-4789-a741-2589e3d0b08b/oauth2/v2.0/token",
					"body": {
						"value": "@concat('client_id=', pipeline().parameters.microsoft_entra_cid, '&scope=', pipeline().parameters.microsoft_entra_scope, '&client_secret=', activity('Get secret').output.pipelineReturnValue.keyvault_secret_value, '&grant_type=client_credentials')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get secret",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pl_util_get_keyvault_secret",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"keyvault_secret_name": {
							"value": "@pipeline().parameters.key_vault_secret_name",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Table info",
				"description": "Table info",
				"type": "WebActivity",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Get access token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"headers": {
						"Authorization": {
							"value": "@concat('Bearer ', activity('Get access token').output['access_token'])",
							"type": "Expression"
						}
					},
					"url": {
						"value": "@concat(\n    pipeline().parameters.base_url, '/',\n    replace(pipeline().parameters.relative_url, 'dataset', ''),\n    '/TableInfos'\n)",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "cloud",
						"type": "IntegrationRuntimeReference"
					}
				}
			},
			{
				"name": "CHANGE Loop until all data is copied",
				"description": "change to write to temp dir\nand have loop end condition",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Get access token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greaterOrEquals(variables('lines_to_skip'), pipeline().parameters.total_rows)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "copy chunk of data",
							"description": "Copies the REST API dataset to datalake.",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"additionalHeaders": {
										"Authorization": {
											"value": "@concat('Bearer ', activity('Get access token').output['access_token'])",
											"type": "Expression"
										}
									},
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings",
										"copyBehavior": "FlattenHierarchy"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@json(string(pipeline().parameters.column_mapping))",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "ds_rest_api_cloud",
									"type": "DatasetReference",
									"parameters": {
										"relative_url": {
											"value": "@concat(\n    pipeline().parameters.relative_url,\n    '?$skip=', string(variables('lines_to_skip')),\n    '&$top=', string(pipeline().parameters.page_size)\n)",
											"type": "Expression"
										},
										"base_url": {
											"value": "@pipeline().parameters.base_url",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_adls_parquet_auto_resolve",
									"type": "DatasetReference",
									"parameters": {
										"datastore_name": {
											"value": "@pipeline().parameters.datastore_name",
											"type": "Expression"
										},
										"dataset_name": {
											"value": "@pipeline().parameters.dataset_name",
											"type": "Expression"
										},
										"storage_account_uri": {
											"value": "@pipeline().globalParameters.storage_account_datalake_uri",
											"type": "Expression"
										},
										"container_name": {
											"value": "@pipeline().globalParameters.storage_container_datalake",
											"type": "Expression"
										},
										"file_name": {
											"value": "@concat(pipeline().parameters.dataset_name, '_', string(variables('lines_to_skip')))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Set prev_lines_to_skip",
							"description": "only needed because no self references are allowed",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "copy chunk of data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "prev_lines_to_skip",
								"value": {
									"value": "@variables('lines_to_skip')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set next lines_to_skip",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set prev_lines_to_skip",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "lines_to_skip",
								"value": {
									"value": "@add(variables('prev_lines_to_skip'), pipeline().parameters.page_size)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "CHANGE - Lookup1",
							"description": "Perhaps try lookup on source? Failed on parquet file",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "copy chunk of data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "ParquetReadSettings"
									}
								},
								"dataset": {
									"referenceName": "ds_adls_parquet_auto_resolve",
									"type": "DatasetReference",
									"parameters": {
										"datastore_name": {
											"value": "@pipeline().parameters.datastore_name",
											"type": "Expression"
										},
										"dataset_name": {
											"value": "@pipeline().parameters.dataset_name",
											"type": "Expression"
										},
										"storage_account_uri": {
											"value": "@pipeline().globalParameters.storage_account_datalake_uri",
											"type": "Expression"
										},
										"container_name": {
											"value": "@pipeline().globalParameters.storage_container_datalake",
											"type": "Expression"
										},
										"file_name": "@concat(pipeline().parameters.dataset_name, '_', string(variables('lines_to_skip')))"
									}
								}
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			},
			{
				"name": "CHANGE from temp to actual target",
				"description": "from temp to actual target, overwrite 1 file",
				"type": "Copy",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "CHANGE Loop until all data is copied",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"enableStaging": false
				}
			}
		],
		"parameters": {
			"datastore_name": {
				"type": "string",
				"defaultValue": "cbs"
			},
			"dataset_name": {
				"type": "string",
				"defaultValue": "cbs_kwb_2024_85984NED_test_tim"
			},
			"relative_url": {
				"type": "string",
				"defaultValue": "85984NED"
			},
			"base_url": {
				"type": "string",
				"defaultValue": "https://apim.dev.cloud.nibc.com/internal/cbs/kadaster-api/1.0/dataset"
			},
			"key_vault_secret_name": {
				"type": "string",
				"defaultValue": "apim-authorization-access-token"
			},
			"microsoft_entra_cid": {
				"type": "string",
				"defaultValue": "a1bb61c1-d7c6-468b-9e6a-720dcd63ce91"
			},
			"microsoft_entra_scope": {
				"type": "string",
				"defaultValue": "0c28ca60-24cd-45bd-95f1-01fdaee9c41c/.default"
			},
			"column_mapping": {
				"type": "string",
				"defaultValue": {
					"type": "TabularTranslator",
					"mappings": [
						{
							"source": {
								"path": "$['value']"
							},
							"sink": {
								"name": "$['value']"
							}
						}
					],
					"mapComplexValuesToString": true
				}
			},
			"total_rows": {
				"type": "int",
				"defaultValue": 35000
			},
			"page_size": {
				"type": "int",
				"defaultValue": 5000
			}
		},
		"variables": {
			"lines_to_skip": {
				"type": "Integer",
				"defaultValue": 0
			},
			"prev_lines_to_skip": {
				"type": "Integer",
				"defaultValue": 0
			}
		},
		"folder": {
			"name": "cloud"
		},
		"annotations": []
	}
}