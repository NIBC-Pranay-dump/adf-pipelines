{
	"name": "pl_custom_moneyview_json_zip_create_parquet_only",
	"properties": {
		"activities": [
			{
				"name": "set download timestamp",
				"description": "Set download timestamp in west europe timezone",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "download_timestamp",
					"value": {
						"value": "@formatDateTime(convertTimeZone(pipeline().TriggerTime,'UTC','W. Europe Standard Time'), 'yyyyMMdd_HHmmss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set delta days",
				"description": "The number of ticks that have elapsed since 12:00:00 midnight, January 1, 0001 in the Gregorian calendar since the input timestamp",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "set download timestamp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "delta_days",
					"value": {
						"value": "@div(\n    sub(\n        ticks(formatDateTime(pipeline().parameters.end_date,'yyyy-MM-dd')\n        ),\n        ticks(formatDateTime(pipeline().parameters.start_date,'yyyy-MM-dd')\n        )\n    )\n,864000000000)\n\n\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "set delta days",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@range(0,add(variables('delta_days'),1))",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Set file date",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "file_date",
								"value": {
									"value": "@addDays(formatDateTime(pipeline().parameters.start_date,'yyyy-MM-dd'),item())\n\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set file name",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set file date",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "file_name",
								"value": {
									"value": "@replace(\n    pipeline().parameters.file_name_template, \n    '{yyyymmdd}', \n    formatDateTime(variables('file_date'),'yyyyMMdd')\n)\n\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "create parquet_copy1",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "set file name",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"additionalColumns": [
										{
											"name": "file_name",
											"value": {
												"value": "@variables('file_name')",
												"type": "Expression"
											}
										},
										{
											"name": "download_timestamp",
											"value": {
												"value": "@variables('download_timestamp')",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": false,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings",
										"compressionProperties": {
											"type": "ZipDeflateReadSettings",
											"preserveZipFileNameAsFolder": false
										}
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@json(string(pipeline().parameters.column_mapping))",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "ds_blob_zipped_json_unpack_auto_resolve",
									"type": "DatasetReference",
									"parameters": {
										"storage_account_uri": "@pipeline().globalParameters.storage_account_data_factory_uri",
										"datastore_name": "@pipeline().parameters.datastore_name",
										"dataset_name": "@pipeline().parameters.dataset_name",
										"file_name": "@variables('file_name')",
										"container_name": {
											"value": "@pipeline().globalParameters.storage_container_data_factory",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_adls_parquet_auto_resolve",
									"type": "DatasetReference",
									"parameters": {
										"datastore_name": {
											"value": "@pipeline().parameters.datastore_name",
											"type": "Expression"
										},
										"dataset_name": {
											"value": "@pipeline().parameters.dataset_name",
											"type": "Expression"
										},
										"storage_account_uri": {
											"value": "@pipeline().globalParameters.storage_account_datalake_uri",
											"type": "Expression"
										},
										"container_name": {
											"value": "@pipeline().globalParameters.storage_container_datalake",
											"type": "Expression"
										},
										"file_name": {
											"value": "@toLower(replace(\n    variables('file_name'), \n    '.json.zip', \n    ''\n))",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"file_name_template": {
				"type": "string",
				"defaultValue": "MV_NIBC_Hypotheken_{yyyymmdd}.json.zip"
			},
			"datastore_name": {
				"type": "string",
				"defaultValue": "moneyview"
			},
			"dataset_name": {
				"type": "string",
				"defaultValue": "mv_nibc_hypotheken"
			},
			"column_mapping": {
				"type": "string",
				"defaultValue": {
					"type": "TabularTranslator",
					"mappings": [
						{
							"source": {
								"path": "$['renteFeed']"
							},
							"sink": {
								"name": "$['renteFeed']"
							}
						},
						{
							"source": {
								"path": "file_name"
							},
							"sink": {
								"name": "file_name"
							}
						},
						{
							"source": {
								"path": "download_timestamp"
							},
							"sink": {
								"name": "download_timestamp"
							}
						}
					],
					"mapComplexValuesToString": true
				}
			},
			"start_date": {
				"type": "string",
				"defaultValue": "2025-03-07"
			},
			"end_date": {
				"type": "string",
				"defaultValue": "2025-03-21"
			}
		},
		"variables": {
			"file_content": {
				"type": "String"
			},
			"file_name": {
				"type": "String"
			},
			"file_date": {
				"type": "String"
			},
			"file_name_to_delete": {
				"type": "String"
			},
			"download_timestamp": {
				"type": "String"
			},
			"delta_days": {
				"type": "Integer"
			}
		},
		"folder": {
			"name": "cloud"
		},
		"annotations": []
	}
}