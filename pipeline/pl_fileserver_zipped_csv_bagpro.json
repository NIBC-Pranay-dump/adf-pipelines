{
	"name": "pl_fileserver_zipped_csv_bagpro",
	"properties": {
		"activities": [
			{
				"name": "Set trigger_date",
				"description": "this task uses the provided trigger_date as input.  if empty it sets in trigger_date the date at which the pl is triggered in form of a timestamp ",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "trigger_date",
					"value": {
						"value": "@if(empty(pipeline().parameters.trigger_date_yyyyMMdd), formatDateTime(pipeline().TriggerTime,\n'yyyyMMdd'), pipeline().parameters.trigger_date_yyyyMMdd)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Use trigger_date to set the filedate",
				"description": "with this task  the file_date is set. this corresponds to the trigger_date - 1 day.",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set trigger_date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "file_date",
					"value": {
						"value": "@addDays(concat(\n    substring(variables('trigger_date'), 0, 4), '-',\n    substring(variables('trigger_date'), 4, 2), '-',\n    substring(variables('trigger_date'), 6, 2), ' 00:00:00'),-1, 'yyyyMMdd' )",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Include file_date in the file name",
				"description": "with this step the trigger_date is replaced inside the file name",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Use trigger_date to set the filedate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "file_name",
					"value": {
						"value": "@replace(\n    pipeline().parameters.source_file_name_pattern,\n    '{file_date}',\n    variables('file_date')\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Detect available data",
				"description": "with this step it is checked if any recent file is present in the folder for the ingestion. Files with the new file date in their pattern  are searched",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Include file_date in the file name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "FileServerReadSettings",
							"recursive": false,
							"wildcardFileName": {
								"value": "@variables('file_name')",
								"type": "Expression"
							},
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings",
							"skipLineCount": {
								"value": "@pipeline().parameters.skip_line_count",
								"type": "Expression"
							}
						}
					},
					"dataset": {
						"referenceName": "ds_fileserver_zipped_csv",
						"type": "DatasetReference",
						"parameters": {
							"user_name": {
								"value": "@pipeline().parameters.fileserver_user_name",
								"type": "Expression"
							},
							"host_name": {
								"value": "@pipeline().parameters.fileserver_host_name",
								"type": "Expression"
							},
							"key_vault_uri": {
								"value": "@pipeline().globalParameters.key_vault_uri",
								"type": "Expression"
							},
							"fileserver_password_secret_name": {
								"value": "@pipeline().parameters.keyvault_secret_name",
								"type": "Expression"
							},
							"directory": {
								"value": "@pipeline().parameters.fileserver_directory",
								"type": "Expression"
							},
							"column_delimiter": {
								"value": "@pipeline().parameters.column_delimiter",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "data available",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Detect available data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(activity('Detect available data').output, 'firstRow')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "csv data_copy",
							"description": "Copy bag source file to parquet file",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "bag_file_date",
											"value": {
												"value": "@variables('file_date')",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "FileServerReadSettings",
										"recursive": true,
										"wildcardFileName": {
											"value": "@variables('file_name')",
											"type": "Expression"
										},
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings",
										"skipLineCount": {
											"value": "@pipeline().parameters.skip_line_count",
											"type": "Expression"
										},
										"compressionProperties": {
											"type": "ZipDeflateReadSettings"
										}
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings",
										"copyBehavior": "MergeFiles"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_fileserver_zipped_csv",
									"type": "DatasetReference",
									"parameters": {
										"user_name": {
											"value": "@pipeline().parameters.fileserver_user_name",
											"type": "Expression"
										},
										"host_name": {
											"value": "@pipeline().parameters.fileserver_host_name",
											"type": "Expression"
										},
										"key_vault_uri": {
											"value": "@pipeline().globalParameters.key_vault_uri",
											"type": "Expression"
										},
										"fileserver_password_secret_name": {
											"value": "@pipeline().parameters.keyvault_secret_name",
											"type": "Expression"
										},
										"directory": {
											"value": "@pipeline().parameters.fileserver_directory",
											"type": "Expression"
										},
										"column_delimiter": {
											"value": "@pipeline().parameters.column_delimiter",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_adls_parquet_auto_resolve",
									"type": "DatasetReference",
									"parameters": {
										"datastore_name": {
											"value": "@pipeline().parameters.datastore_name",
											"type": "Expression"
										},
										"dataset_name": {
											"value": "@pipeline().parameters.dataset_name",
											"type": "Expression"
										},
										"storage_account_uri": {
											"value": "@pipeline().globalParameters.storage_account_datalake_uri",
											"type": "Expression"
										},
										"container_name": {
											"value": "@pipeline().globalParameters.storage_container_datalake",
											"type": "Expression"
										},
										"file_name": {
											"value": "@pipeline().parameters.dataset_name",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"datastore_name": {
				"type": "string",
				"defaultValue": "bagpro"
			},
			"keyvault_secret_name": {
				"type": "string",
				"defaultValue": "fileserver-credentials-ods"
			},
			"dataset_name": {
				"type": "string",
				"defaultValue": "cddn_export_bag_pro"
			},
			"source_file_name_pattern": {
				"type": "string",
				"defaultValue": "cddn_export_bag_pro_{file_date}.zip"
			},
			"fileserver_user_name": {
				"type": "string",
				"defaultValue": "PRD\\SRV_AA_DEV"
			},
			"fileserver_host_name": {
				"type": "string",
				"defaultValue": "\\\\SVNIBCFILD101\\e$"
			},
			"fileserver_directory": {
				"type": "string",
				"defaultValue": "CDP\\BAGPro"
			},
			"column_delimiter": {
				"type": "string",
				"defaultValue": ";"
			},
			"skip_line_count": {
				"type": "int",
				"defaultValue": 0
			},
			"trigger_date_yyyyMMdd": {
				"type": "string"
			}
		},
		"variables": {
			"trigger_date": {
				"type": "String"
			},
			"file_date": {
				"type": "String"
			},
			"file_name": {
				"type": "String"
			}
		},
		"folder": {
			"name": "on_prem"
		},
		"annotations": []
	}
}